set nocompatible              " be iMproved, required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" YCM 主要是用于c语言 
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-scripts/a.vim'
" git
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-fugitive'
" c 语言语法高亮
Plugin 'justinmk/vim-syntax-extra'


" shell漂亮的配色方案
Plugin 'altercation/vim-colors-solarized'

" ctrlp
Plugin 'ctrlpvim/ctrlp.vim'
" grep on fly
Plugin 'dkprice/vim-easygrep'
"代码生成器
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

"outline
"
Plugin 'majutsushi/tagbar'
"底部状态提示
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"change somethings
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-abolish'
"filebrowser
Plugin 'tpope/vim-vinegar'
" python complete
Plugin 'davidhalter/jedi-vim'
" debug
Plugin 'joonty/vdebug'
" go debug
Plugin 'Shougo/vimshell.vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'sebdah/vim-delve'
" php complete
Plugin 'shawncplus/phpcomplete.vim'
Plugin 'fatih/vim-go'
Plugin 'iamcco/markdown-preview.vim'
" mac dash
Plugin 'rizzatti/dash.vim'
" linux dash
Plugin 'KabbAmine/zeavim.vim'
call vundle#end()            " required
filetype plugin indent on    " required
" 上面为Vundle管理内容
"
set encoding=utf-8
" our <leader> will be the space key
let mapleader=","
"
" " our <localleader> will be the '-' key
let maplocalleader="-"
" 指定python处理器，要不然会使用python3,会报错
let g:ycm_server_python_interpreter = '/usr/bin/python'
"YCM的c语言配置
let g:ycm_global_ycm_extra_conf='~/.vim/ycmconf/ycm.c.py'
"全局函数手动触发自动补全
let g:ycm_key_invoke_completion = '<C-a>'
" 语法高亮，配色方案为solarized
"
syntax enable
set background=dark


" tab 替换为4个空格
set tabstop=4
set shiftwidth=4
set expandtab

let g:UltiSnipsExpandTrigger="<c-t>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"outline
"
nmap <F12> :TagbarToggle<CR>

let g:airline#extensions#tabline#enabled = 1

"netrw 配置
let g:netrw_banner = 0
let g:netrw_liststyle = 3

let g:ycm_python_binary_path = '/usr/bin/python3'

" disable arrow move
nnoremap <Up> :echomsg "use k"<cr>
nnoremap <Down> :echomsg "use j"<cr>
nnoremap <Left> :echomsg "use h"<cr>
nnoremap <Right> :echomsg "use l"<cr>
let g:phpcomplete_enhance_jump_to_definition = 1
let g:phpcomplete_mappings = {
   \ 'jump_to_def': '<C-]>',
   \ 'jump_to_def_split': '<C-W><C-]>',
   \ 'jump_to_def_vsplit': '<C-W><C-\>',
   \}

let g:vdebug_options= {
    \    "port" : 9000,
    \    "server" : '0.0.0.0',
    \    "timeout" : 100,
    \    "on_close" : 'detach',
    \    "break_on_open" : 1,
    \    "ide_key" : 'xdebug',
    \    "path_maps" : {},
    \    "debug_window_level" : 0,
    \    "debug_file_level" : 0,
    \    "debug_file" : "",
    \    "watch_window_style" : 'expanded',
    \    "marker_default" : '⬦',
    \    "marker_closed_tree" : '▸',
    \    "marker_open_tree" : '▾'
    \}
hi Normal ctermfg=252 ctermbg=none
nmap <silent> <F9> <Plug>MarkdownPreview
" buffer shortcut
nnoremap <silent> [b :bprevious<CR> 
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR> 
nnoremap <silent> ]B :blast<CR>
" ctags
set tags=tags;  " ; 不可省略，表示若当前目录中不存在tags， 则在父目录中寻找。

nmap <silent> ]s  :call GenCscope() <CR>
func! GenCscope()
    exec "w"
    if &filetype == 'php'
        exec '!find . -name "*.php"  > cscope.files'
        exec "!cscope -bkq -i cscope.files"
        exec "!/usr/local/bin/ctags -R --languages=php --php-kinds=ctif  --fields=+aimS ."
    elseif &filetype == 'c'
        exec '!find . -name "*.c" -o -name "*.h" > cscope.files'
        exec "!cscope -bkq -i cscope.files"
        exec "!/usr/local/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ."
    endif
endfunc

if has("cscope")
    set cscopetag   " 使支持用 Ctrl+]  和 Ctrl+t 快捷键在代码间跳来跳去
    " check cscope for definition of a symbol before checking ctags:
    " set to 1 if you want the reverse search order.
     set csto=1

     " add any cscope database in current directory
     if filereadable("cscope.out")
         cs add cscope.out
     " else add the database pointed to by environment variable
     elseif $CSCOPE_DB !=""
         cs add $CSCOPE_DB
     endif

     " show msg when any other cscope db added
     set cscopeverbose

     nmap [s :cs find s <C-R>=expand("<cword>")<CR><CR>
     nmap [g :cs find g <C-R>=expand("<cword>")<CR><CR>
     nmap [c :cs find c <C-R>=expand("<cword>")<CR><CR>
     nmap [t :cs find t <C-R>=expand("<cword>")<CR><CR>
     nmap [e :cs find e <C-R>=expand("<cword>")<CR><CR>
     nmap [f :cs find f <C-R>=expand("<cfile>")<CR><CR>
     nmap [i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
     nmap [d :cs find d <C-R>=expand("<cword>")<CR><CR>
 endif
" paste format
set pastetoggle=<F2>
inoremap jk <esc>

func! RunProgram()
    exec "w"
    if &filetype == 'c'
        exec "!gcc % -o %<"
        exec "! ./%<"
    elseif &filetype == 'sh'
        exec "!bash %"
    elseif &filetype == 'go'
        exec "!go run %"
    elseif &filetype == 'python'
        exec "!python %"
    elseif &filetype == 'php'
        exec "!php %"
    endif
endfunc
autocmd VimEnter * noremap  <leader>t  :call RunProgram()<CR>



nnoremap  <leader>q  :Dash<CR>
"easy grep
let g:EasyGrepMode = 2     " All:0, Open Buffers:1, TrackExt:2, 
let g:EasyGrepCommand = 0  " Use vimgrep:0, grepprg:1
let g:EasyGrepRecursive  = 1 " Recursive searching
let g:EasyGrepIgnoreCase = 1 " not ignorecase:0
let g:EasyGrepFilesToExclude = "tags"
let g:EasyGrepFilesToExclude = "*.bak"
let g:EasyGrepFilesToExclude = "*~"
let g:EasyGrepFilesToExclude = "cscope.*"
let g:EasyGrepFilesToExclude = "*.a"
let g:EasyGrepFilesToExclude = "*.o"
let g:EasyGrepFilesToExclude = "*.pyc"
let g:EasyGrepFilesToExclude = "*.log"

let g:ctrlp_regexp = 1
set noswapfile

let g:airline_solarized_bg='dark'
